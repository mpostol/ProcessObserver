//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace NetworkConfig {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Prot : DataSet {
        
        private ProtocolsDataTable tableProtocols;
        
        public Prot() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Prot(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Protocols"] != null)) {
                    this.Tables.Add(new ProtocolsDataTable(ds.Tables["Protocols"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProtocolsDataTable Protocols {
            get {
                return this.tableProtocols;
            }
        }
        
        public override DataSet Clone() {
            Prot cln = ((Prot)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Protocols"] != null)) {
                this.Tables.Add(new ProtocolsDataTable(ds.Tables["Protocols"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableProtocols = ((ProtocolsDataTable)(this.Tables["Protocols"]));
            if ((this.tableProtocols != null)) {
                this.tableProtocols.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Prot";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Prot.xsd";
            this.Locale = new System.Globalization.CultureInfo("pl-PL");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableProtocols = new ProtocolsDataTable();
            this.Tables.Add(this.tableProtocols);
        }
        
        private bool ShouldSerializeProtocols() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ProtocolsRowChangeEventHandler(object sender, ProtocolsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTypeID;
            
            private DataColumn columnTypeName;
            
            internal ProtocolsDataTable() : 
                    base("Protocols") {
                this.InitClass();
            }
            
            internal ProtocolsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            internal DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            public ProtocolsRow this[int index] {
                get {
                    return ((ProtocolsRow)(this.Rows[index]));
                }
            }
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowChanged;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowChanging;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowDeleted;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowDeleting;
            
            public void AddProtocolsRow(ProtocolsRow row) {
                this.Rows.Add(row);
            }
            
            public ProtocolsRow AddProtocolsRow(System.SByte TypeID, string TypeName) {
                ProtocolsRow rowProtocolsRow = ((ProtocolsRow)(this.NewRow()));
                rowProtocolsRow.ItemArray = new object[] {
                        TypeID,
                        TypeName};
                this.Rows.Add(rowProtocolsRow);
                return rowProtocolsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProtocolsDataTable cln = ((ProtocolsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProtocolsDataTable();
            }
            
            internal void InitVars() {
                this.columnTypeID = this.Columns["TypeID"];
                this.columnTypeName = this.Columns["TypeName"];
            }
            
            private void InitClass() {
                this.columnTypeID = new DataColumn("TypeID", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeID);
                this.columnTypeName = new DataColumn("TypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeName);
                this.columnTypeID.AllowDBNull = false;
                this.columnTypeName.AllowDBNull = false;
            }
            
            public ProtocolsRow NewProtocolsRow() {
                return ((ProtocolsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProtocolsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProtocolsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProtocolsRowChanged != null)) {
                    this.ProtocolsRowChanged(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProtocolsRowChanging != null)) {
                    this.ProtocolsRowChanging(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProtocolsRowDeleted != null)) {
                    this.ProtocolsRowDeleted(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProtocolsRowDeleting != null)) {
                    this.ProtocolsRowDeleting(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProtocolsRow(ProtocolsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsRow : DataRow {
            
            private ProtocolsDataTable tableProtocols;
            
            internal ProtocolsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProtocols = ((ProtocolsDataTable)(this.Table));
            }
            
            public System.SByte TypeID {
                get {
                    return ((System.SByte)(this[this.tableProtocols.TypeIDColumn]));
                }
                set {
                    this[this.tableProtocols.TypeIDColumn] = value;
                }
            }
            
            public string TypeName {
                get {
                    return ((string)(this[this.tableProtocols.TypeNameColumn]));
                }
                set {
                    this[this.tableProtocols.TypeNameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsRowChangeEvent : EventArgs {
            
            private ProtocolsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProtocolsRowChangeEvent(ProtocolsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProtocolsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
